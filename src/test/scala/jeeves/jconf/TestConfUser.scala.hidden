package test.cap.jeeves.jconf

import cap.scalasmt._
import cap.jeeves._
import cap.jeeves.jconf._

import org.scalatest.FunSuite
import org.scalatest.Assertions.{expect}
import scala.collection.immutable.Map
import scala.collection.mutable.Set
import scala.util.Random

class TestConfUser extends FunSuite {
  def mkUser( userName : String, name: String
            , pwd: String, userStatus : UserStatus)
    : ConfUser = {
    val u = new ConfUser(Username (userName), Name(name), pwd, userStatus);
    u
  }

  // jconf users.
  val author0 = mkUser("author0", "Author0", "a0p", AuthorStatus)
  private def getAuthorCtxt0 (stage : PaperStage = Submission)
  : ConfContext = new ConfContext(author0, stage);

  val reviewer0 = mkUser("reviewer0", "Reviewer0", "", ReviewerStatus);
  private def getReviewerCtxt0 (stage : PaperStage = Submission)
  : ConfContext = new ConfContext(reviewer0, stage);
  val reviewer1 = mkUser("reviewer1", "Reviewer1", "", ReviewerStatus);

  val pc0 = mkUser("pc0", "PC0", "", PCStatus);
  private def getPcCtxt0 (stage : PaperStage = Submission)
  : ConfContext = new ConfContext(pc0, stage);

  val public0 = mkUser("public0", "Public0", "", PublicStatus);
  private def getPublicCtxt0 (stage: PaperStage = Submission)
  : ConfContext = new ConfContext(public0, stage);

  test ("password") {
    expect(Password("a0p")) {
      author0.getPassword(getAuthorCtxt0(Submission))
    }
    expect(Password("default")) {
      author0.getPassword(getPublicCtxt0(Submission))
    }
  }
}
